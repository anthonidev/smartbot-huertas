import { Injectable, Logger } from '@nestjs/common';
import { ClaudeApiService } from '../../claude-api/claude-api.service';
import { ChatMessage, MessageRole } from '../entities/chat-message.entity';
import { RoleContext } from '../../context/entities/role-context.entity';
import { SystemGuide } from '../../context/entities/system-guide.entity';
import { User } from '../../common/interfaces/user.interface';

@Injectable()
export class ResponseGenerationService {
  private readonly logger = new Logger(ResponseGenerationService.name);

  constructor(private readonly claudeApiService: ClaudeApiService) {}

  async generateDatabaseResponse(
    userQuestion: string,
    user: User,
    queryResults: any[],
    conversationHistory: ChatMessage[],
  ): Promise<string> {
    try {
      const prompt = this.buildDatabaseResponsePrompt(
        userQuestion,
        user,
        queryResults,
        conversationHistory,
      );

      const response = await this.claudeApiService.sendMessage(
        [
          {
            role: 'user',
            content: prompt,
          },
        ],
        {
          model: 'claude-3-haiku-20240307',
          maxTokens: 1000,
          temperature: 0.7,
        },
      );

      this.logger.debug(
        `‚úÖ Respuesta de BD generada para usuario ${user.email}`,
      );
      return response.trim();
    } catch (error) {
      this.logger.error(`‚ùå Error generando respuesta de BD: ${error.message}`);
      return 'He encontrado la informaci√≥n solicitada, pero ocurri√≥ un error al formatear la respuesta.';
    }
  }

  async generateSystemResponse(
    userQuestion: string,
    user: User,
    conversationHistory: ChatMessage[],
    roleContext: RoleContext | null,
    systemGuides: SystemGuide[],
  ): Promise<string> {
    try {
      const prompt = this.buildSystemResponsePrompt(
        userQuestion,
        user,
        conversationHistory,
        roleContext,
        systemGuides,
      );

      const response = await this.claudeApiService.sendMessage(
        [
          {
            role: 'user',
            content: prompt,
          },
        ],
        {
          model: 'claude-3-haiku-20240307',
          maxTokens: 1500,
          temperature: 0.7,
        },
      );

      this.logger.debug(
        `‚úÖ Respuesta de sistema generada para usuario ${user.email}`,
      );
      return response.trim();
    } catch (error) {
      this.logger.error(
        `‚ùå Error generando respuesta de sistema: ${error.message}`,
      );
      return 'Estoy aqu√≠ para ayudarte, pero ocurri√≥ un error al procesar tu consulta. ¬øPodr√≠as reformular tu pregunta?';
    }
  }

  private buildDatabaseResponsePrompt(
    userQuestion: string,
    user: User,
    queryResults: any[],
    conversationHistory: ChatMessage[],
  ): string {
    const historyContext =
      this.buildConversationHistoryContext(conversationHistory);

    return `Eres un asistente especializado del sistema. Bas√°ndote en los resultados de la consulta a la base de datos, proporciona una respuesta clara y √∫til al usuario.

INFORMACI√ìN DEL USUARIO:
- Nombre: ${user.fullName}
- Email: ${user.email}
- Rol: ${user.role.name} (${user.role.code})

PREGUNTA ORIGINAL: "${userQuestion}"

RESULTADOS DE LA CONSULTA:
${JSON.stringify(queryResults, null, 2)}

${historyContext}

INSTRUCCIONES PARA LA RESPUESTA:
1. Interpreta y presenta los datos de manera clara y comprensible
2. Si hay muchos resultados, resume los m√°s relevantes y menciona el total
3. Incluye informaci√≥n contextual relevante basada en los datos
4. Usa un tono profesional pero amigable
5. Si los datos est√°n relacionados con fechas, format√©alas apropiadamente
6. Si hay n√∫meros o cantidades, pres√©ntales de manera clara
7. Sugiere acciones adicionales si es relevante

Responde de manera conversacional, como si fueras un asistente experto del sistema.`;
  }

  private buildSystemResponsePrompt(
    userQuestion: string,
    user: User,
    conversationHistory: ChatMessage[],
    roleContext: RoleContext | null,
    systemGuides: SystemGuide[],
  ): string {
    const historyContext =
      this.buildConversationHistoryContext(conversationHistory);
    let contextInfo = '';

    if (roleContext) {
      contextInfo += `CONTEXTO DE TU ROL (${roleContext.roleCode} - ${roleContext.name}):
Descripci√≥n: ${roleContext.description}

CAPACIDADES QUE TIENES:
${roleContext.capabilities.map((cap) => `‚Ä¢ ${cap}`).join('\n')}

CONSULTAS COMUNES DE TU ROL:
${roleContext.commonQueries.map((query) => `‚Ä¢ ${query}`).join('\n')}

FLUJOS DE TRABAJO DISPONIBLES:
${roleContext.workflows.map((workflow) => `‚Ä¢ ${workflow}`).join('\n')}

`;
    }

    if (systemGuides && systemGuides.length > 0) {
      contextInfo += `GU√çAS DEL SISTEMA DISPONIBLES PARA TI:
${systemGuides
  .map(
    (guide) => `
üìã ${guide.title}
${guide.description ? `   Descripci√≥n: ${guide.description}` : ''}
   Pasos:
${guide.steps.map((step, index) => `   ${index + 1}. ${step}`).join('\n')}
`,
  )
  .join('\n')}

`;
    }

    return `Eres un asistente especializado del sistema, experto en ayudar a usuarios con su rol espec√≠fico.

INFORMACI√ìN DEL USUARIO:
- Nombre: ${user.fullName}
- Email: ${user.email}
- Rol: ${user.role.name} (${user.role.code})

${contextInfo}PREGUNTA DEL USUARIO: "${userQuestion}"

${historyContext}

INSTRUCCIONES PARA LA RESPUESTA:
1. Responde espec√≠ficamente a la pregunta bas√°ndote en el contexto del rol del usuario
2. Si la pregunta est√° relacionada con una gu√≠a disponible, proporciona los pasos espec√≠ficos
3. Si es sobre capacidades, explica c√≥mo puede usar esas funciones
4. Si es una consulta com√∫n de su rol, da una respuesta detallada
5. Si menciona un flujo de trabajo, gu√≠alo paso a paso
6. Usa un tono profesional pero amigable
7. Si no tienes informaci√≥n espec√≠fica, sugiere las opciones m√°s relevantes para su rol
8. Siempre mant√©n el contexto de la conversaci√≥n anterior si es relevante

Responde de manera conversacional, como si fueras un experto del sistema especializado en el rol del usuario.`;
  }

  private buildConversationHistoryContext(
    conversationHistory: ChatMessage[],
  ): string {
    if (!conversationHistory || conversationHistory.length === 0) {
      return '';
    }

    const historyText = conversationHistory
      .map((msg) => {
        const role = msg.role === MessageRole.USER ? 'Usuario' : 'Asistente';
        return `${role}: ${msg.content}`;
      })
      .join('\n');

    return `HISTORIAL DE CONVERSACI√ìN RECIENTE:
${historyText}

`;
  }
}
